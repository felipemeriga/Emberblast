name: Emberblast CI/CD
# The difference between "released" and "published" is a "released" tag is not final, a "published" release is final
env:
  REGISTRY: ghcr.io
  REPO: ${{ format('ghcr.io/{0}/Emberblast', github.repository_owner) }}
on:
  release:
    types: [released]
  push:
    branches:
      - main
jobs:
  test:
    name: Test package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10" ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest
  push_to_pip:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [ test ]
    name: Push package to pip
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
          .
      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
  push_to_docker_registry:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [ test ]
    name: Push Docker image to GitHub Docker Packages
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Validate build
        run: |
          git config --global url."https://x-token-auth:${{ secrets.GITHUB_TOKEN }}@github.com/felipemeriga".insteadOf "https://github.com/felipemeriga"
      # This Push will not trigger a deployment because it uses github token
      # We don't want an event to fire for the container named for the branch, we only deploy containers tagged with the git sha
      # Released and Prereleased use this container, but dev deployment uses the lower
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GHCR.io
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: github.repository_owner
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.REPO }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Push to ghcr.io
        id: dockerbuild
        uses: docker/build-push-action@v2
        with:
          labels: |
            cpe-video-ref=${{ github.ref }}
            com-github-draft=${{ github.event.release.draft == true }}
            com-github-prerelease=${{ github.event.release.prerelease == true }}
            com-github-release=${{ github.event.release.prerelease == false && github.event.release.draft == false && github.event.release != null }}
            ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
          build-args: COMMIT_HASH=${{ github.sha }},LAST_GIT_TAG=${{ github.ref }}
          secrets: |
            "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}"